var assert = require('assert');
var Transaction = require("../transaction.js");
var pg = require("pg");
var Generator = require("./sampleDataGenerator.js");

var connectionString = "postgres://postgres:@localhost/travis_ci_test";
var transaction;
before(function(done){
	Generator.generate(done);
})

after(function(done){
	Generator.teardown(done);
})

beforeEach(function(beforeDone){
   createConnection(didCreateConnection);
	function didCreateConnection(err, client, done) {
		assert(!err, "Should not trow error" + err);
		Transaction(client, done, didCreateTransaction);
		function didCreateTransaction(err, transaction_) {
			assert(!err, "Should not trow error" + err);
			assert(transaction_);
			transaction = transaction_
			beforeDone();
		} 
	}
 })
 
 afterEach(function(done){
   transaction.commit(done);
 })

describe('transaction', function(){
	describe('#query', function(){
		it('should perfom query', function(done){
			var preparedStatement = {
				text: "SELECT * FROM Train",
				values: [],
				name: 'allTrains'
			};
			transaction.query(preparedStatement, didQuery);
			function didQuery(err, result) {
				assert(!err, "Should not trow error" + err);
				assert.equal(result.rows[0].name, "ICE");
				
				done();
			}
		});
		
		it('should perfom commit after fetch query', function(done){
			transaction.commit(didCommit);
			function didCommit(err) {
				assert(!err, "Should not trow error" + err);
				done();
			}
		});
	 });
	
	describe('#rollback', function(){
		it('should perfom rollback', function(done){
			var preparedStatement = {
				text: "INSERT INTO Train (id, name) VALUES (2, 'TGV');",
				values: [],
				name: 'createTrain'
			};
			transaction.query(preparedStatement, didQuery);
			function didQuery(err, result) {
				assert(!err, "Should not trow error" + err);
				transaction.rollback(didRollback);
				function didRollback(err) {
					assert(!err, "Should not trow error" + err);
					done();
				}
			}
		});
		it('should not find rollback data', function(done){
			var preparedStatement = {
				text: "SELECT * FROM Train WHERE id = 2",
				values: [],
				name: 'rollbackTrain'
			};
			transaction.query(preparedStatement, didQuery);
			function didQuery(err, result) {
				assert(!err, "Should not trow error" + err);
				assert.equal(result.rows.length, 0);
				
				done();
			}
		});
		
		it('should rollback when error', function(done){
			var preparedStatement = {
				text: "UPDATE Train SET id = 'hallo' WHERE id = 2;",
				values: [],
				name: 't'
			};
			transaction.query(preparedStatement, didQuery);
			function didQuery(err, result) {
				assert(err, "Should trow error");				
				done();
			}
		});
	 });
	
	describe('#commit', function(){
		it('should perfom commit', function(done){
			var preparedStatement = {
				text: "INSERT INTO Train (id, name) VALUES (2, 'Transrapid');",
				values: [],
				name: 'CommitTrain'
			};
			transaction.query(preparedStatement, didQuery);
			function didQuery(err, result) {
				assert(!err, "Should not trow error" + err);
				transaction.commit(didCommit);
				function didCommit(err) {
					assert(!err, "Should not trow error" + err);
					transaction.rollback(done);
				}
			}
		});
		it('should find commited data', function(done){
			var preparedStatement = {
				text: "SELECT * FROM Train WHERE id = 2",
				values: [],
				name: 'train'
			};
			transaction.query(preparedStatement, didQuery);
			function didQuery(err, result) {
				assert(!err, "Should not trow error" + err);
				assert.equal(result.rows[0].name, "Transrapid");
				
				done();
			}
		});
	 });
});

function createConnection(callback) {
	pg.connect(connectionString, callback);
}

